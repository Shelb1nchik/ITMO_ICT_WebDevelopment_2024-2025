{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1: \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u043e\u043a\u0435\u0442\u043e\u0432 \u043d\u0430 Python \u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 1 ! \u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0432\u044b \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u0435\u0441\u044c \u0441 \u043e\u0441\u043d\u043e\u0432\u0430\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0445 \u0447\u0430\u0442-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430\u043c\u0438 UDP, TCP \u0438 HTTP. \u041e\u0431\u0437\u043e\u0440 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UDP \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440, \u0433\u0434\u0435: \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00ab\u041f\u0440\u0438\u0432\u0435\u0442, \u0441\u0435\u0440\u0432\u0435\u0440\u00bb. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \u00ab\u041f\u0440\u0438\u0432\u0435\u0442, \u043a\u043b\u0438\u0435\u043d\u0442\u00bb. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 TCP \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440, \u0433\u0434\u0435 \u043a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP-\u0441\u0435\u0440\u0432\u0435\u0440, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTP. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 ( index.html ). \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0430\u0445 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0430\u0442-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 (100% \u0431\u0430\u043b\u043b\u043e\u0432): \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c threading \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u0427\u0430\u0442 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (60% \u0431\u0430\u043b\u043b\u043e\u0432): \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0435\u0437 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c threading . \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: \u0412\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439: \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0445 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0447\u0435\u0440\u0435\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 HTTP GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#1-python","text":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 1 ! \u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0432\u044b \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u0435\u0441\u044c \u0441 \u043e\u0441\u043d\u043e\u0432\u0430\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0445 \u0447\u0430\u0442-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430\u043c\u0438 UDP, TCP \u0438 HTTP.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1: \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u043e\u043a\u0435\u0442\u043e\u0432 \u043d\u0430 Python"},{"location":"#_1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UDP \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440, \u0433\u0434\u0435: \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00ab\u041f\u0440\u0438\u0432\u0435\u0442, \u0441\u0435\u0440\u0432\u0435\u0440\u00bb. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \u00ab\u041f\u0440\u0438\u0432\u0435\u0442, \u043a\u043b\u0438\u0435\u043d\u0442\u00bb. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 TCP \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440, \u0433\u0434\u0435 \u043a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP-\u0441\u0435\u0440\u0432\u0435\u0440, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTP. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 ( index.html ). \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0430\u0445 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0430\u0442-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 (100% \u0431\u0430\u043b\u043b\u043e\u0432): \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c threading \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u0427\u0430\u0442 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (60% \u0431\u0430\u043b\u043b\u043e\u0432): \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0435\u0437 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c threading . \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: \u0412\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439: \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0445 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0447\u0435\u0440\u0435\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 HTTP GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.","title":"\u041e\u0431\u0437\u043e\u0440 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"Lr1/leetcode/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 567. Permutation in String \u0423\u0441\u043b\u043e\u0432\u0438\u0435: Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise. In other words, return true if one of s1's permutations is the substring of s2. Example 1: Input: s1 = \"ab\", s2 = \"eidbaooo\" Output: true Explanation: s2 contains one permutation of s1 (\"ba\"). Example 2: Input: s1 = \"ab\", s2 = \"eidboaoo\" Output: false Constraints: 1 <= s1.length, s2.length <= 10^4 s1 and s2 consist of lowercase English letters. \u041a\u043e\u0434: class Solution(object): def checkInclusion(self, s1, s2): from collections import Counter s1Count = Counter(s1) s2Count = Counter(s2[:len(s1)]) if s1Count == s2Count: return True for i in range(len(s1), len(s2)): s2Count[s2[i]] += 1 s2Count[s2[i - len(s1)]] -= 1 if s2Count[s2[i - len(s1)]] == 0: del s2Count[s2[i - len(s1)]] if s1Count == s2Count: return True return False \u0417\u0430\u0434\u0430\u0447\u0430 410. Split Array Largest Sum \u0423\u0441\u043b\u043e\u0432\u0438\u0435: Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized. Return the minimized largest sum of the split. A subarray is a contiguous part of the array. Example 1: Input: nums = [7,2,5,10,8], k = 2 Output: 18 Explanation: There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18. Example 2: Input: nums = [1,2,3,4,5], k = 2 Output: 9 Explanation: There are four ways to split nums into two subarrays. The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9. Constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 10^6 1 <= k <= min(50, nums.length) \u041a\u043e\u0434: class Solution(object): def splitArray(self, nums, k): def canSplit(nums, k, maxSum): currentSum = 0 subarrays = 1 for num in nums: if currentSum + num > maxSum: currentSum = num subarrays += 1 if subarrays > k: return False else: currentSum += num return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if canSplit(nums, k, mid): right = mid else: left = mid + 1 return left \u0417\u0430\u0434\u0430\u0447\u0430 636. Exclusive Time of Functions \u0423\u0441\u043b\u043e\u0432\u0438\u0435: On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1. Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp. You are given a list logs, where logs[i] represents the ith log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively. A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3. Return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i. Example 1: Input: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"] Output: [3,4] Explanation: Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1. Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5. Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time. So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing. Example 2: Input: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"] Output: [8] Explanation: Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. Function 0 (initial call) resumes execution then immediately calls itself again. Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time. Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time. So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing. Constraints: 1 <= n <= 100 1 <= logs.length <= 500 0 <= function_id < n 0 <= timestamp <= 10^9 No two start events will happen at the same timestamp. No two end events will happen at the same timestamp. Each function has an \"end\" log for each \"start\" log. \u041a\u043e\u0434: class Solution(object): def exclusiveTime(self, n, logs): stack = [] times = [0] * n prev_time = 0 for log in logs: fid, typ, time = log.split(':') fid, time = int(fid), int(time) if typ == 'start': if stack: times[stack[-1]] += time - prev_time stack.append(fid) prev_time = time else: times[stack.pop()] += time - prev_time + 1 prev_time = time + 1 return times \u0417\u0430\u0434\u0430\u0447\u0430 673. Number of Longest Increasing Subsequence \u0423\u0441\u043b\u043e\u0432\u0438\u0435: Given an integer array nums, return the number of longest increasing subsequences. Notice that the sequence has to be strictly increasing. Example 1: Input: nums = [1,3,5,4,7] Output: 2 Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]. Example 2: Input: nums = [2,2,2,2,2] Output: 5 Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5. Constraints: 1 <= nums.length <= 2000 -10^6 <= nums[i] <= 10^6 The answer is guaranteed to fit inside a 32-bit integer. \u041a\u043e\u0434: class Solution(object): def findNumberOfLIS(self, nums): n = len(nums) length = [1] * n count = [1] * n for i in range(n): for j in range(i): if nums[j] < nums[i]: if length[j] + 1 > length[i]: length[i] = length[j] + 1 count[i] = 0 if length[j] + 1 == length[i]: count[i] += count[j] maxLength = max(length) result = 0 for i in range(n): if length[i] == maxLength: result += count[i] return result \u0417\u0430\u0434\u0430\u0447\u0430 672. Bulb Switcher II \u0423\u0441\u043b\u043e\u0432\u0438\u0435: There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where: Button 1: Flips the status of all the bulbs. Button 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...). Button 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...). Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...). You must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press. Given the two integers n and presses, return the number of different possible statuses after performing all presses button presses. Example 1: Input: n = 1, presses = 1 Output: 2 Explanation: Status can be: - [off] by pressing button 1 - [on] by pressing button 2 Example 2: Input: n = 2, presses = 1 Output: 3 Explanation: Status can be: - [off, off] by pressing button 1 - [on, off] by pressing button 2 - [off, on] by pressing button 3 Example 3: Input: n = 3, presses = 1 Output: 4 Explanation: Status can be: - [off, off, off] by pressing button 1 - [off, on, off] by pressing button 2 - [on, off, on] by pressing button 3 - [off, on, on] by pressing button 4 Constraints: 1 <= n <= 1000 0 <= presses <= 1000 \u041a\u043e\u0434: class Solution(object): def flipLights(self, n, m): seen = set() n = min(n, 6) shift = max(0, 6 - n) for cand in range(16): bcount = bin(cand).count('1') if bcount % 2 == m % 2 and bcount <= m: lights = 0 if ((cand >> 0) & 1) > 0: lights ^= 0b111111 >> shift if ((cand >> 1) & 1) > 0: lights ^= 0b010101 >> shift if ((cand >> 2) & 1) > 0: lights ^= 0b101010 >> shift if ((cand >> 3) & 1) > 0: lights ^= 0b100100 >> shift seen.add(lights) return len(seen) \u0417\u0430\u0434\u0430\u0447\u0430 670. Maximum Swap \u0423\u0441\u043b\u043e\u0432\u0438\u0435: You are given an integer num. You can swap two digits at most once to get the maximum valued number. Return the maximum valued number you can get. Example 1: Input: num = 2736 Output: 7236 Explanation: Swap the number 2 and the number 7. Example 2: Input: num = 9973 Output: 9973 Explanation: No swap. Constraints: 0 <= num <= 10^8 \u041a\u043e\u0434: class Solution(object): def maximumSwap(self, num): A = list(str(num)) ans = A[:] for i in range(len(A)): for j in range(i + 1, len(A)): A[i], A[j] = A[j], A[i] for k in range(len(A)): if A[k] != ans[k]: if A[k] > ans[k]: ans = A[:] break A[i], A[j] = A[j], A[i] return int(''.join(ans)) \u0417\u0430\u0434\u0430\u0447\u0430 669. Trim a Binary Search Tree \u0423\u0441\u043b\u043e\u0432\u0438\u0435: Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer. Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds. Example 1: Input: root = [1,0,2], low = 1, high = 2 Output: [1,null,2] Example 2: Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3 Output: [3,2,null,1] Constraints: The number of nodes in the tree is in the range [1, 10^4]. 0 <= Node.val <= 10^4 The value of each node in the tree is unique. root is guaranteed to be a valid binary search tree. 0 <= low <= high <= 10^4 \u041a\u043e\u0434: # Definition for a binary tree node. class TreeNode(object): def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Solution(object): def trimBST(self, root, low, high): if not root: return None if root.val > high: return self.trimBST(root.left, low, high) if root.val < low: return self.trimBST(root.right, low, high) root.left = self.trimBST(root.left, low, high) root.right = self.trimBST(root.right, low, high) return root \u0417\u0430\u0434\u0430\u0447\u0430 565. Array Nesting \u0423\u0441\u043b\u043e\u0432\u0438\u0435: You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1]. You should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule: The first element in s[k] starts with the selection of the element nums[k] of index = k. The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on. We stop adding right before a duplicate element occurs in s[k]. Return the longest length of a set s[k]. Example 1: Input: nums = [5,4,0,3,1,6,2] Output: 4 Explanation: nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2. One of the longest sets s[k]: s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0} Example 2: Input: nums = [0,1,2] Output: 1 Constraints: 1 <= nums.length <= 10^5 0 <= nums[i] < nums.length All the values of nums are unique \u041a\u043e\u0434: class Solution(object): def arrayNesting(self, nums): visited = [False] * len(nums) max_length = 0 for i in range(len(nums)): if not visited[i]: start = i count = 0 while not visited[start]: visited[start] = True start = nums[start] count += 1 max_length = max(max_length, count) return max_length \u0417\u0430\u0434\u0430\u0447\u0430 624. Maximum Distance in Arrays \u0423\u0441\u043b\u043e\u0432\u0438\u0435: You are given m arrays, where each array is sorted in ascending order. You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|. Return the maximum distance. Example 1: Input: arrays = [[1,2,3],[4,5],[1,2,3]] Output: 4 Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array. Example 2: Input: arrays = [[1],[1]] Output: 0 Constraints: m == arrays.length 2 <= m <= 10^5 1 <= arrays[i].length <= 500 -10^4 <= arrays[i][j] <= 10^4 arrays[i] is sorted in ascending order. There will be at most 105 integers in all the arrays. \u041a\u043e\u0434: class Solution(object): def maxDistance(self, arrays): min_val = arrays[0][0] max_val = arrays[0][-1] max_distance = 0 for i in range(1, len(arrays)): max_distance = max(max_distance, abs(arrays[i][-1] - min_val), abs(arrays[i][0] - max_val)) min_val = min(min_val, arrays[i][0]) max_val = max(max_val, arrays[i][-1]) return max_distance \u0417\u0430\u0434\u0430\u0447\u0430 621. Task Scheduler \u0423\u0441\u043b\u043e\u0432\u0438\u0435: You are given an array of CPU tasks, each labeled with a letter from A to Z, and a number n. Each CPU interval can be idle or allow the completion of one task. Tasks can be completed in any order, but there's a constraint: there has to be a gap of at least n intervals between two tasks with the same label. Return the minimum number of CPU intervals required to complete all tasks. Example 1: Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2 Output: 8 Explanation: A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B. After completing task A, you must wait two intervals before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th interval, you can do A again as 2 intervals have passed. Example 2: Input: tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1 Output: 6 Explanation: A possible sequence is: A -> B -> C -> D -> A -> B. With a cooling interval of 1, you can repeat a task after just one other task. Example 3: Input: tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3 Output: 10 Explanation: A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B. There are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks. Constraints: 1 <= tasks.length <= 10^4 tasks[i] is an uppercase English letter. 0 <= n <= 100 \u041a\u043e\u0434: from collections import Counter class Solution(object): def leastInterval(self, tasks, n): task_counts = Counter(tasks) max_freq = max(task_counts.values()) count_max_freq = list(task_counts.values()).count(max_freq) return max(len(tasks), (max_freq - 1) * (n + 1) + count_max_freq) \u0417\u0430\u0434\u0430\u0447\u0430 525. Contiguous Array \u0423\u0441\u043b\u043e\u0432\u0438\u0435: Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1. Example 1: Input: nums = [0,1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1. Example 2: Input: nums = [0,1,0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. Constraints: 1 <= nums.length <= 10^5 nums[i] is either 0 or 1. \u041a\u043e\u0434: class Solution(object): def findMaxLength(self, nums): count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(nums): count += 1 if num == 1 else -1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length \u0417\u0430\u0434\u0430\u0447\u0430 435. Non-overlapping Intervals \u0423\u0441\u043b\u043e\u0432\u0438\u0435: Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. Note that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping. Example 1: Input: intervals = [[1,2],[2,3],[3,4],[1,3]] Output: 1 Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping. Example 2: Input: intervals = [[1,2],[1,2],[1,2]] Output: 2 Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping. Example 3: Input: intervals = [[1,2],[2,3]] Output: 0 Explanation: You don't need to remove any of the intervals since they're already non-overlapping. Constraints: 1 <= intervals.length <= 105 intervals[i].length == 2 -5 * 10^4 <= starti < endi <= 5 * 10^4 \u041a\u043e\u0434: class Solution(object): def eraseOverlapIntervals(self, intervals): intervals.sort(key=lambda x: x[1]) ans = 0 k = float('-inf') for x, y in intervals: if x >= k: k = y else: ans += 1 return ans","title":"LeetCode: \u0417\u0430\u0434\u0430\u0447\u0438"},{"location":"Lr1/leetcode/#567-permutation-in-string","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 567. Permutation in String"},{"location":"Lr1/leetcode/#_1","text":"Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise. In other words, return true if one of s1's permutations is the substring of s2. Example 1: Input: s1 = \"ab\", s2 = \"eidbaooo\" Output: true Explanation: s2 contains one permutation of s1 (\"ba\"). Example 2: Input: s1 = \"ab\", s2 = \"eidboaoo\" Output: false Constraints: 1 <= s1.length, s2.length <= 10^4 s1 and s2 consist of lowercase English letters.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_2","text":"class Solution(object): def checkInclusion(self, s1, s2): from collections import Counter s1Count = Counter(s1) s2Count = Counter(s2[:len(s1)]) if s1Count == s2Count: return True for i in range(len(s1), len(s2)): s2Count[s2[i]] += 1 s2Count[s2[i - len(s1)]] -= 1 if s2Count[s2[i - len(s1)]] == 0: del s2Count[s2[i - len(s1)]] if s1Count == s2Count: return True return False","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_3","text":"","title":""},{"location":"Lr1/leetcode/#410-split-array-largest-sum","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 410. Split Array Largest Sum"},{"location":"Lr1/leetcode/#_4","text":"Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized. Return the minimized largest sum of the split. A subarray is a contiguous part of the array. Example 1: Input: nums = [7,2,5,10,8], k = 2 Output: 18 Explanation: There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18. Example 2: Input: nums = [1,2,3,4,5], k = 2 Output: 9 Explanation: There are four ways to split nums into two subarrays. The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9. Constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 10^6 1 <= k <= min(50, nums.length)","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_5","text":"class Solution(object): def splitArray(self, nums, k): def canSplit(nums, k, maxSum): currentSum = 0 subarrays = 1 for num in nums: if currentSum + num > maxSum: currentSum = num subarrays += 1 if subarrays > k: return False else: currentSum += num return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if canSplit(nums, k, mid): right = mid else: left = mid + 1 return left","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_6","text":"","title":""},{"location":"Lr1/leetcode/#636-exclusive-time-of-functions","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 636. Exclusive Time of Functions"},{"location":"Lr1/leetcode/#_7","text":"On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1. Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp. You are given a list logs, where logs[i] represents the ith log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively. A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3. Return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i. Example 1: Input: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"] Output: [3,4] Explanation: Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1. Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5. Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time. So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing. Example 2: Input: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"] Output: [8] Explanation: Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. Function 0 (initial call) resumes execution then immediately calls itself again. Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time. Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time. So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing. Constraints: 1 <= n <= 100 1 <= logs.length <= 500 0 <= function_id < n 0 <= timestamp <= 10^9 No two start events will happen at the same timestamp. No two end events will happen at the same timestamp. Each function has an \"end\" log for each \"start\" log.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_8","text":"class Solution(object): def exclusiveTime(self, n, logs): stack = [] times = [0] * n prev_time = 0 for log in logs: fid, typ, time = log.split(':') fid, time = int(fid), int(time) if typ == 'start': if stack: times[stack[-1]] += time - prev_time stack.append(fid) prev_time = time else: times[stack.pop()] += time - prev_time + 1 prev_time = time + 1 return times","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_9","text":"","title":""},{"location":"Lr1/leetcode/#673-number-of-longest-increasing-subsequence","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 673. Number of Longest Increasing Subsequence"},{"location":"Lr1/leetcode/#_10","text":"Given an integer array nums, return the number of longest increasing subsequences. Notice that the sequence has to be strictly increasing. Example 1: Input: nums = [1,3,5,4,7] Output: 2 Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]. Example 2: Input: nums = [2,2,2,2,2] Output: 5 Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5. Constraints: 1 <= nums.length <= 2000 -10^6 <= nums[i] <= 10^6 The answer is guaranteed to fit inside a 32-bit integer.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_11","text":"class Solution(object): def findNumberOfLIS(self, nums): n = len(nums) length = [1] * n count = [1] * n for i in range(n): for j in range(i): if nums[j] < nums[i]: if length[j] + 1 > length[i]: length[i] = length[j] + 1 count[i] = 0 if length[j] + 1 == length[i]: count[i] += count[j] maxLength = max(length) result = 0 for i in range(n): if length[i] == maxLength: result += count[i] return result","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_12","text":"","title":""},{"location":"Lr1/leetcode/#672-bulb-switcher-ii","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 672. Bulb Switcher II"},{"location":"Lr1/leetcode/#_13","text":"There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where: Button 1: Flips the status of all the bulbs. Button 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...). Button 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...). Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...). You must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press. Given the two integers n and presses, return the number of different possible statuses after performing all presses button presses. Example 1: Input: n = 1, presses = 1 Output: 2 Explanation: Status can be: - [off] by pressing button 1 - [on] by pressing button 2 Example 2: Input: n = 2, presses = 1 Output: 3 Explanation: Status can be: - [off, off] by pressing button 1 - [on, off] by pressing button 2 - [off, on] by pressing button 3 Example 3: Input: n = 3, presses = 1 Output: 4 Explanation: Status can be: - [off, off, off] by pressing button 1 - [off, on, off] by pressing button 2 - [on, off, on] by pressing button 3 - [off, on, on] by pressing button 4 Constraints: 1 <= n <= 1000 0 <= presses <= 1000","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_14","text":"class Solution(object): def flipLights(self, n, m): seen = set() n = min(n, 6) shift = max(0, 6 - n) for cand in range(16): bcount = bin(cand).count('1') if bcount % 2 == m % 2 and bcount <= m: lights = 0 if ((cand >> 0) & 1) > 0: lights ^= 0b111111 >> shift if ((cand >> 1) & 1) > 0: lights ^= 0b010101 >> shift if ((cand >> 2) & 1) > 0: lights ^= 0b101010 >> shift if ((cand >> 3) & 1) > 0: lights ^= 0b100100 >> shift seen.add(lights) return len(seen)","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_15","text":"","title":""},{"location":"Lr1/leetcode/#670-maximum-swap","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 670. Maximum Swap"},{"location":"Lr1/leetcode/#_16","text":"You are given an integer num. You can swap two digits at most once to get the maximum valued number. Return the maximum valued number you can get. Example 1: Input: num = 2736 Output: 7236 Explanation: Swap the number 2 and the number 7. Example 2: Input: num = 9973 Output: 9973 Explanation: No swap. Constraints: 0 <= num <= 10^8","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_17","text":"class Solution(object): def maximumSwap(self, num): A = list(str(num)) ans = A[:] for i in range(len(A)): for j in range(i + 1, len(A)): A[i], A[j] = A[j], A[i] for k in range(len(A)): if A[k] != ans[k]: if A[k] > ans[k]: ans = A[:] break A[i], A[j] = A[j], A[i] return int(''.join(ans))","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_18","text":"","title":""},{"location":"Lr1/leetcode/#669-trim-a-binary-search-tree","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 669. Trim a Binary Search Tree"},{"location":"Lr1/leetcode/#_19","text":"Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer. Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds. Example 1: Input: root = [1,0,2], low = 1, high = 2 Output: [1,null,2] Example 2: Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3 Output: [3,2,null,1] Constraints: The number of nodes in the tree is in the range [1, 10^4]. 0 <= Node.val <= 10^4 The value of each node in the tree is unique. root is guaranteed to be a valid binary search tree. 0 <= low <= high <= 10^4","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_20","text":"# Definition for a binary tree node. class TreeNode(object): def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class Solution(object): def trimBST(self, root, low, high): if not root: return None if root.val > high: return self.trimBST(root.left, low, high) if root.val < low: return self.trimBST(root.right, low, high) root.left = self.trimBST(root.left, low, high) root.right = self.trimBST(root.right, low, high) return root","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_21","text":"","title":""},{"location":"Lr1/leetcode/#565-array-nesting","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 565. Array Nesting"},{"location":"Lr1/leetcode/#_22","text":"You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1]. You should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule: The first element in s[k] starts with the selection of the element nums[k] of index = k. The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on. We stop adding right before a duplicate element occurs in s[k]. Return the longest length of a set s[k]. Example 1: Input: nums = [5,4,0,3,1,6,2] Output: 4 Explanation: nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2. One of the longest sets s[k]: s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0} Example 2: Input: nums = [0,1,2] Output: 1 Constraints: 1 <= nums.length <= 10^5 0 <= nums[i] < nums.length All the values of nums are unique","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_23","text":"class Solution(object): def arrayNesting(self, nums): visited = [False] * len(nums) max_length = 0 for i in range(len(nums)): if not visited[i]: start = i count = 0 while not visited[start]: visited[start] = True start = nums[start] count += 1 max_length = max(max_length, count) return max_length","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_24","text":"","title":""},{"location":"Lr1/leetcode/#624-maximum-distance-in-arrays","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 624. Maximum Distance in Arrays"},{"location":"Lr1/leetcode/#_25","text":"You are given m arrays, where each array is sorted in ascending order. You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|. Return the maximum distance. Example 1: Input: arrays = [[1,2,3],[4,5],[1,2,3]] Output: 4 Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array. Example 2: Input: arrays = [[1],[1]] Output: 0 Constraints: m == arrays.length 2 <= m <= 10^5 1 <= arrays[i].length <= 500 -10^4 <= arrays[i][j] <= 10^4 arrays[i] is sorted in ascending order. There will be at most 105 integers in all the arrays.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_26","text":"class Solution(object): def maxDistance(self, arrays): min_val = arrays[0][0] max_val = arrays[0][-1] max_distance = 0 for i in range(1, len(arrays)): max_distance = max(max_distance, abs(arrays[i][-1] - min_val), abs(arrays[i][0] - max_val)) min_val = min(min_val, arrays[i][0]) max_val = max(max_val, arrays[i][-1]) return max_distance","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_27","text":"","title":""},{"location":"Lr1/leetcode/#621-task-scheduler","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 621. Task Scheduler"},{"location":"Lr1/leetcode/#_28","text":"You are given an array of CPU tasks, each labeled with a letter from A to Z, and a number n. Each CPU interval can be idle or allow the completion of one task. Tasks can be completed in any order, but there's a constraint: there has to be a gap of at least n intervals between two tasks with the same label. Return the minimum number of CPU intervals required to complete all tasks. Example 1: Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2 Output: 8 Explanation: A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B. After completing task A, you must wait two intervals before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th interval, you can do A again as 2 intervals have passed. Example 2: Input: tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1 Output: 6 Explanation: A possible sequence is: A -> B -> C -> D -> A -> B. With a cooling interval of 1, you can repeat a task after just one other task. Example 3: Input: tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3 Output: 10 Explanation: A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B. There are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks. Constraints: 1 <= tasks.length <= 10^4 tasks[i] is an uppercase English letter. 0 <= n <= 100","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_29","text":"from collections import Counter class Solution(object): def leastInterval(self, tasks, n): task_counts = Counter(tasks) max_freq = max(task_counts.values()) count_max_freq = list(task_counts.values()).count(max_freq) return max(len(tasks), (max_freq - 1) * (n + 1) + count_max_freq)","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_30","text":"","title":""},{"location":"Lr1/leetcode/#525-contiguous-array","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 525. Contiguous Array"},{"location":"Lr1/leetcode/#_31","text":"Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1. Example 1: Input: nums = [0,1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1. Example 2: Input: nums = [0,1,0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. Constraints: 1 <= nums.length <= 10^5 nums[i] is either 0 or 1.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_32","text":"class Solution(object): def findMaxLength(self, nums): count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(nums): count += 1 if num == 1 else -1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length","title":"\u041a\u043e\u0434:"},{"location":"Lr1/leetcode/#_33","text":"","title":""},{"location":"Lr1/leetcode/#435-non-overlapping-intervals","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 435. Non-overlapping Intervals"},{"location":"Lr1/leetcode/#_34","text":"Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. Note that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping. Example 1: Input: intervals = [[1,2],[2,3],[3,4],[1,3]] Output: 1 Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping. Example 2: Input: intervals = [[1,2],[1,2],[1,2]] Output: 2 Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping. Example 3: Input: intervals = [[1,2],[2,3]] Output: 0 Explanation: You don't need to remove any of the intervals since they're already non-overlapping. Constraints: 1 <= intervals.length <= 105 intervals[i].length == 2 -5 * 10^4 <= starti < endi <= 5 * 10^4","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435:"},{"location":"Lr1/leetcode/#_35","text":"class Solution(object): def eraseOverlapIntervals(self, intervals): intervals.sort(key=lambda x: x[1]) ans = 0 k = float('-inf') for x, y in intervals: if x >= k: k = y else: ans += 1 return ans","title":"\u041a\u043e\u0434:"},{"location":"Lr1/task1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 1: UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430: \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UDP \u0441\u043e\u043a\u0435\u0442\u043e\u0432 . \u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \u0438 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0421\u0435\u0440\u0432\u0435\u0440 : \u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0445\u043e\u0441\u0442\u0435 \u0438 \u043f\u043e\u0440\u0442\u0443. \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442: \"\u041f\u0440\u0438\u0432\u0435\u0442, \u043a\u043b\u0438\u0435\u043d\u0442\" . \u041a\u043b\u0438\u0435\u043d\u0442 : \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: \"\u041f\u0440\u0438\u0432\u0435\u0442, \u0441\u0435\u0440\u0432\u0435\u0440\" \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 UDP \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 127.0.0.1:12345 . \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0430\u0434\u0440\u0435\u0441 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0438 \u0441\u0430\u043c\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443. import socket def start_server(host='127.0.0.1', port=12345): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_socket.bind((host, port)) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}...\") while True: try: message, client_address = server_socket.recvfrom(1024) print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043e\u0442 {client_address}: {message.decode()}\") response = \"\u041f\u0440\u0438\u0432\u0435\u0442, \u043a\u043b\u0438\u0435\u043d\u0442\" server_socket.sendto(response.encode(), client_address) print(f\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e {client_address}: {response}\") except Exception as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430: {e}\") break if __name__ == \"__main__\": start_server()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UDP"},{"location":"Lr1/task1/#1-udp-","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1: UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435"},{"location":"Lr1/task1/#_1","text":"","title":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430:"},{"location":"Lr1/task1/#_2","text":"\u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UDP \u0441\u043e\u043a\u0435\u0442\u043e\u0432 . \u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \u0438 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr1/task1/#_3","text":"\u0421\u0435\u0440\u0432\u0435\u0440 : \u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0445\u043e\u0441\u0442\u0435 \u0438 \u043f\u043e\u0440\u0442\u0443. \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442: \"\u041f\u0440\u0438\u0432\u0435\u0442, \u043a\u043b\u0438\u0435\u043d\u0442\" . \u041a\u043b\u0438\u0435\u043d\u0442 : \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: \"\u041f\u0440\u0438\u0432\u0435\u0442, \u0441\u0435\u0440\u0432\u0435\u0440\" \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"Lr1/task1/#_4","text":"","title":"\u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435"},{"location":"Lr1/task1/#_5","text":"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 UDP \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 127.0.0.1:12345 . \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0430\u0434\u0440\u0435\u0441 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u0438 \u0441\u0430\u043c\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443. import socket def start_server(host='127.0.0.1', port=12345): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_socket.bind((host, port)) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}...\") while True: try: message, client_address = server_socket.recvfrom(1024) print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043e\u0442 {client_address}: {message.decode()}\") response = \"\u041f\u0440\u0438\u0432\u0435\u0442, \u043a\u043b\u0438\u0435\u043d\u0442\" server_socket.sendto(response.encode(), client_address) print(f\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e {client_address}: {response}\") except Exception as e: print(f\"\u041e\u0448\u0438\u0431\u043a\u0430: {e}\") break if __name__ == \"__main__\": start_server()","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:"},{"location":"Lr1/task2/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 2: \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430: \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0439. - \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. - \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0421\u0435\u0440\u0432\u0435\u0440 : \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435: ax^2 + bx + c = 0 . \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0440\u0430\u0441\u0447\u0451\u0442\u044b: \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0434\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u043d\u0442. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f (\u0435\u0441\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f). \u041a\u043b\u0438\u0435\u043d\u0442 : \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0442\u0438\u043f\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 ( a , b , c ). \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0435. \u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u0420\u0435\u0448\u0430\u0435\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443, \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u0432\u0435\u0434\u0435\u043d\u044b \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043a\u043e\u0440\u043d\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u043d\u0442\u0430. import socket import math def handle_client(client_socket): print(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430...\") while True: request = client_socket.recv(1024).decode() if not request: break print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u0437\u0430\u043f\u0440\u043e\u0441: {request}\") data = request.split(\";\") operation = data[0] parameters = list(map(float, data[1:])) if len(data) > 1 else [] if operation == \"1\": if len(parameters) != 3: result = \"\u041e\u0448\u0438\u0431\u043a\u0430: \u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f 3 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 (a, b, c).\" else: a, b, c = parameters discriminant = b**2 - 4*a*c if discriminant < 0: result = \"\u041d\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u043d\u0435\u0439.\" elif discriminant == 0: root = -b / (2 * a) result = f\"\u041e\u0434\u0438\u043d \u043a\u043e\u0440\u0435\u043d\u044c: {root}\" else: root1 = (-b + math.sqrt(discriminant)) / (2 * a) root2 = (-b - math.sqrt(discriminant)) / (2 * a) result = f\"\u0414\u0432\u0430 \u043a\u043e\u0440\u043d\u044f: {root1}, {root2}\" else: result = \"\u041e\u0448\u0438\u0431\u043a\u0430: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f.\" client_socket.send(result.encode()) def start_server(host='127.0.0.1', port=12345): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}...\") while True: client_socket, client_address = server_socket.accept() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}\") handle_client(client_socket)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 TCP"},{"location":"Lr1/task2/#2-","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2: \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f"},{"location":"Lr1/task2/#_1","text":"","title":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430:"},{"location":"Lr1/task2/#_2","text":"\u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0439. - \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. - \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr1/task2/#_3","text":"\u0421\u0435\u0440\u0432\u0435\u0440 : \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435: ax^2 + bx + c = 0 . \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0440\u0430\u0441\u0447\u0451\u0442\u044b: \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0434\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u043d\u0442. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f (\u0435\u0441\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f). \u041a\u043b\u0438\u0435\u043d\u0442 : \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0442\u0438\u043f\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 ( a , b , c ). \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0435.","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"Lr1/task2/#_4","text":"","title":"\u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435"},{"location":"Lr1/task2/#_5","text":"\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u0420\u0435\u0448\u0430\u0435\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443, \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u0432\u0435\u0434\u0435\u043d\u044b \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043a\u043e\u0440\u043d\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u043d\u0442\u0430. import socket import math def handle_client(client_socket): print(\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430...\") while True: request = client_socket.recv(1024).decode() if not request: break print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u0437\u0430\u043f\u0440\u043e\u0441: {request}\") data = request.split(\";\") operation = data[0] parameters = list(map(float, data[1:])) if len(data) > 1 else [] if operation == \"1\": if len(parameters) != 3: result = \"\u041e\u0448\u0438\u0431\u043a\u0430: \u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f 3 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 (a, b, c).\" else: a, b, c = parameters discriminant = b**2 - 4*a*c if discriminant < 0: result = \"\u041d\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u043d\u0435\u0439.\" elif discriminant == 0: root = -b / (2 * a) result = f\"\u041e\u0434\u0438\u043d \u043a\u043e\u0440\u0435\u043d\u044c: {root}\" else: root1 = (-b + math.sqrt(discriminant)) / (2 * a) root2 = (-b - math.sqrt(discriminant)) / (2 * a) result = f\"\u0414\u0432\u0430 \u043a\u043e\u0440\u043d\u044f: {root1}, {root2}\" else: result = \"\u041e\u0448\u0438\u0431\u043a\u0430: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f.\" client_socket.send(result.encode()) def start_server(host='127.0.0.1', port=12345): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}...\") while True: client_socket, client_address = server_socket.accept() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}\") handle_client(client_socket)","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:"},{"location":"Lr1/task3/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 3: \u041f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP \u0421\u0435\u0440\u0432\u0435\u0440 \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u043a\u0430\u0437\u043d\u0438: \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 HTTP \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c : - \u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u0444\u0430\u0439\u043b ( index.html ) \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 HTTP GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b. - \u041a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0421\u0435\u0440\u0432\u0435\u0440 : \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u0430\u0439\u043b index.html . \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 404, \u0435\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d. \u041a\u043b\u0438\u0435\u043d\u0442 : \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ( discipline \u0438 grade ). \u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 : \u0427\u0438\u0442\u0430\u0435\u0442 index.html \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441. \u0415\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 404 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439 \u043e\u0448\u0438\u0431\u043a\u0438. \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 : \u0421\u0435\u0440\u0432\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 127.0.0.1:8080 . \u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. import socket def handle_request(client_socket): try: with open(\"index.html\", \"r\") as html_file: content = html_file.read() response = ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=UTF-8\\r\\n\" f\"Content-Length: {len(content)}\\r\\n\" \"\\r\\n\" f\"{content}\" ) except FileNotFoundError: response = ( \"HTTP/1.1 404 Not Found\\r\\n\" \"Content-Type: text/html; charset=UTF-8\\r\\n\" \"\\r\\n\" \"<html><body><h1>404 Not Found</h1></body></html>\" ) client_socket.send(response.encode()) def start_server(host='127.0.0.1', port=8080): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}...\") while True: client_socket, client_address = server_socket.accept() print(f\"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 {client_address}\") handle_request(client_socket) client_socket.close() if __name__ == \"__main__\": start_server()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP-\u0441\u0435\u0440\u0432\u0435\u0440, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0439 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443"},{"location":"Lr1/task3/#3-http","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 3: \u041f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP \u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"Lr1/task3/#_1","text":"","title":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u043a\u0430\u0437\u043d\u0438:"},{"location":"Lr1/task3/#_2","text":"\u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 HTTP \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c : - \u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u0444\u0430\u0439\u043b ( index.html ) \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 HTTP GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b. - \u041a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr1/task3/#_3","text":"\u0421\u0435\u0440\u0432\u0435\u0440 : \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u0430\u0439\u043b index.html . \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 404, \u0435\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d. \u041a\u043b\u0438\u0435\u043d\u0442 : \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ( discipline \u0438 grade ).","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"Lr1/task3/#_4","text":"","title":"\u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435"},{"location":"Lr1/task3/#_5","text":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 : \u0427\u0438\u0442\u0430\u0435\u0442 index.html \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441. \u0415\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 404 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439 \u043e\u0448\u0438\u0431\u043a\u0438. \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 : \u0421\u0435\u0440\u0432\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 127.0.0.1:8080 . \u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. import socket def handle_request(client_socket): try: with open(\"index.html\", \"r\") as html_file: content = html_file.read() response = ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=UTF-8\\r\\n\" f\"Content-Length: {len(content)}\\r\\n\" \"\\r\\n\" f\"{content}\" ) except FileNotFoundError: response = ( \"HTTP/1.1 404 Not Found\\r\\n\" \"Content-Type: text/html; charset=UTF-8\\r\\n\" \"\\r\\n\" \"<html><body><h1>404 Not Found</h1></body></html>\" ) client_socket.send(response.encode()) def start_server(host='127.0.0.1', port=8080): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}...\") while True: client_socket, client_address = server_socket.accept() print(f\"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 {client_address}\") handle_request(client_socket) client_socket.close() if __name__ == \"__main__\": start_server()","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:"},{"location":"Lr1/task4/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u0427\u0430\u0442-\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u043a\u0430\u0437\u043d\u0438: \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0443\u044e \u0447\u0430\u0442-\u0441\u0438\u0441\u0442\u0435\u043c\u0443 : - \u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438, \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0421\u0435\u0440\u0432\u0435\u0440 : \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u0425\u0440\u0430\u043d\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0438\u0445 \u0438\u043c\u0435\u043d\u0430. \u0422\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 : \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432\u0432\u0435\u0441\u0442\u0438 \u0438\u043c\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438. \u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0438\u043c \u0438\u043c\u0435\u043d\u0430. \u0422\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0438\u0441\u044c. import socket import threading clients = {} def broadcast(message, sender_socket): for client_socket, client_name in clients.items(): if client_socket != sender_socket: try: client_socket.send(message.encode()) except: client_socket.close() del clients[client_socket] def handle_client(client_socket): try: client_name = client_socket.recv(1024).decode() clients[client_socket] = client_name print(f\"{client_name} \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443.\") broadcast(f\"{client_name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443.\", client_socket) while True: message = client_socket.recv(1024).decode() if message: print(f\"{client_name}: {message}\") broadcast(f\"{client_name}: {message}\", client_socket) else: break except: pass finally: print(f\"{clients[client_socket]} \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f.\") broadcast(f\"{clients[client_socket]} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", client_socket) client_socket.close() del clients[client_socket] def start_server(host='127.0.0.1', port=12345): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\") while True: client_socket, client_address = server_socket.accept() print(f\"\u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}\") client_thread = threading.Thread(target=handle_client, args=(client_socket,)) client_thread.start() if __name__ == \"__main__\": start_server()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0430\u0445"},{"location":"Lr1/task4/#4-","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u0427\u0430\u0442-\u0421\u0438\u0441\u0442\u0435\u043c\u0430"},{"location":"Lr1/task4/#_1","text":"","title":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u043a\u0430\u0437\u043d\u0438:"},{"location":"Lr1/task4/#_2","text":"\u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0443\u044e \u0447\u0430\u0442-\u0441\u0438\u0441\u0442\u0435\u043c\u0443 : - \u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438, \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr1/task4/#_3","text":"\u0421\u0435\u0440\u0432\u0435\u0440 : \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u0425\u0440\u0430\u043d\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0438\u0445 \u0438\u043c\u0435\u043d\u0430. \u0422\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 : \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432\u0432\u0435\u0441\u0442\u0438 \u0438\u043c\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438.","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"Lr1/task4/#_4","text":"","title":"\u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435"},{"location":"Lr1/task4/#_5","text":"\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0438\u043c \u0438\u043c\u0435\u043d\u0430. \u0422\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0438\u0441\u044c. import socket import threading clients = {} def broadcast(message, sender_socket): for client_socket, client_name in clients.items(): if client_socket != sender_socket: try: client_socket.send(message.encode()) except: client_socket.close() del clients[client_socket] def handle_client(client_socket): try: client_name = client_socket.recv(1024).decode() clients[client_socket] = client_name print(f\"{client_name} \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443.\") broadcast(f\"{client_name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443.\", client_socket) while True: message = client_socket.recv(1024).decode() if message: print(f\"{client_name}: {message}\") broadcast(f\"{client_name}: {message}\", client_socket) else: break except: pass finally: print(f\"{clients[client_socket]} \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f.\") broadcast(f\"{clients[client_socket]} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", client_socket) client_socket.close() del clients[client_socket] def start_server(host='127.0.0.1', port=12345): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\") while True: client_socket, client_address = server_socket.accept() print(f\"\u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}\") client_thread = threading.Thread(target=handle_client, args=(client_socket,)) client_thread.start() if __name__ == \"__main__\": start_server()","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:"},{"location":"Lr1/task5/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 5: \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0416\u0443\u0440\u043d\u0430\u043b \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d \u0438 \u041e\u0446\u0435\u043d\u043e\u043a \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442: \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0432\u0435\u0431-\u0436\u0443\u0440\u043d\u0430\u043b , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442: 1. \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d \u0447\u0435\u0440\u0435\u0437 \u0432\u0435\u0431-\u0444\u043e\u0440\u043c\u0443. 2. \u041f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 HTML-\u0442\u0430\u0431\u043b\u0438\u0446\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0421\u0435\u0440\u0432\u0435\u0440 : \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0436\u0443\u0440\u043d\u0430\u043b\u0430 \u0438 \u0444\u043e\u0440\u043c\u044b. \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0436\u0443\u0440\u043d\u0430\u043b\u0430 \u043d\u043e\u0432\u044b\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438. \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041a\u043b\u0438\u0435\u043d\u0442 : \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0436\u0443\u0440\u043d\u0430\u043b\u0430. \u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f HTML : \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u044f\u0442\u044b\u043c\u0438. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 : GET : \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0436\u0443\u0440\u043d\u0430\u043b\u0430. POST : \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u043d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0433\u0434\u0435 \u043a\u043b\u044e\u0447 \u2014 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a. import socket disciplines_data = {} def generate_html(): html = \"\"\" <html> <head> <meta charset=\"UTF-8\"> <title>\u0416\u0443\u0440\u043d\u0430\u043b \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d</title> <style> body { font-family: Arial, sans-serif; background-color: #d8a7e1; color: #333; text-align: center; } h1 { color: #4d194d; } table { margin: 0 auto; border-collapse: collapse; } th, td { border: 1px solid #ddd; padding: 8px; text-align: center; } th { background-color: #4CAF50; color: white; } input { margin: 5px; padding: 10px; } form { margin-bottom: 20px; } .form-container { margin: 20px auto; background-color: #fefefe; padding: 20px; border-radius: 10px; width: 50%; } </style> </head> <body> <h1>\u0416\u0443\u0440\u043d\u0430\u043b \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d</h1> <div class=\"form-container\"> <form method=\"POST\"> <label for=\"discipline\">\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430:</label><br> <input type=\"text\" id=\"discipline\" name=\"discipline\" required><br><br> <label for=\"grade\">\u041e\u0446\u0435\u043d\u043a\u0430:</label><br> <input type=\"text\" id=\"grade\" name=\"grade\" required><br><br> <button type=\"submit\">\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c</button> </form> </div> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a:</h2> <table> <tr> <th>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th> <th>\u041e\u0446\u0435\u043d\u043a\u0438</th> </tr> \"\"\" if disciplines_data: for discipline, grades in disciplines_data.items(): grades_str = \", \".join(grades) html += f\"<tr><td>{discipline}</td><td>{grades_str}</td></tr>\" else: html += \"<tr><td colspan='2'>\u0414\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442</td></tr>\" html += \"\"\" </table> </body> </html> \"\"\" return html def handle_request(client_socket): request = client_socket.recv(1024).decode() headers = request.split(\"\\r\\n\") method = headers[0].split()[0] if method == \"GET\": response = generate_html() client_socket.send(\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n\".encode()) client_socket.send(response.encode()) elif method == \"POST\": body = request.split(\"\\r\\n\\r\\n\")[1] post_data = body.split(\"&\") discipline = post_data[0].split(\"=\")[1] grade = post_data[1].split(\"=\")[1] if discipline in disciplines_data: disciplines_data[discipline].append(grade) else: disciplines_data[discipline] = [grade] response = \"HTTP/1.1 303 See Other\\r\\nLocation: /\\r\\n\\r\\n\" client_socket.send(response.encode()) client_socket.close() def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 8080)) server_socket.listen(5) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://localhost:8080/\") while True: client_socket, _ = server_socket.accept() handle_request(client_socket) if __name__ == \"__main__\": start_server()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: \u0412\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"Lr1/task5/#5","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430 5: \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0416\u0443\u0440\u043d\u0430\u043b \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d \u0438 \u041e\u0446\u0435\u043d\u043e\u043a"},{"location":"Lr1/task5/#_1","text":"","title":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442:"},{"location":"Lr1/task5/#_2","text":"\u042d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0432\u0435\u0431-\u0436\u0443\u0440\u043d\u0430\u043b , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442: 1. \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d \u0447\u0435\u0440\u0435\u0437 \u0432\u0435\u0431-\u0444\u043e\u0440\u043c\u0443. 2. \u041f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 HTML-\u0442\u0430\u0431\u043b\u0438\u0446\u0435.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr1/task5/#_3","text":"\u0421\u0435\u0440\u0432\u0435\u0440 : \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0436\u0443\u0440\u043d\u0430\u043b\u0430 \u0438 \u0444\u043e\u0440\u043c\u044b. \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0436\u0443\u0440\u043d\u0430\u043b\u0430 \u043d\u043e\u0432\u044b\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438. \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041a\u043b\u0438\u0435\u043d\u0442 : \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0436\u0443\u0440\u043d\u0430\u043b\u0430.","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"Lr1/task5/#_4","text":"","title":"\u041a\u043e\u0434 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435"},{"location":"Lr1/task5/#_5","text":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f HTML : \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u044f\u0442\u044b\u043c\u0438. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 : GET : \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0436\u0443\u0440\u043d\u0430\u043b\u0430. POST : \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u043d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 : \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0433\u0434\u0435 \u043a\u043b\u044e\u0447 \u2014 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a. import socket disciplines_data = {} def generate_html(): html = \"\"\" <html> <head> <meta charset=\"UTF-8\"> <title>\u0416\u0443\u0440\u043d\u0430\u043b \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d</title> <style> body { font-family: Arial, sans-serif; background-color: #d8a7e1; color: #333; text-align: center; } h1 { color: #4d194d; } table { margin: 0 auto; border-collapse: collapse; } th, td { border: 1px solid #ddd; padding: 8px; text-align: center; } th { background-color: #4CAF50; color: white; } input { margin: 5px; padding: 10px; } form { margin-bottom: 20px; } .form-container { margin: 20px auto; background-color: #fefefe; padding: 20px; border-radius: 10px; width: 50%; } </style> </head> <body> <h1>\u0416\u0443\u0440\u043d\u0430\u043b \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d</h1> <div class=\"form-container\"> <form method=\"POST\"> <label for=\"discipline\">\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430:</label><br> <input type=\"text\" id=\"discipline\" name=\"discipline\" required><br><br> <label for=\"grade\">\u041e\u0446\u0435\u043d\u043a\u0430:</label><br> <input type=\"text\" id=\"grade\" name=\"grade\" required><br><br> <button type=\"submit\">\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c</button> </form> </div> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a:</h2> <table> <tr> <th>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th> <th>\u041e\u0446\u0435\u043d\u043a\u0438</th> </tr> \"\"\" if disciplines_data: for discipline, grades in disciplines_data.items(): grades_str = \", \".join(grades) html += f\"<tr><td>{discipline}</td><td>{grades_str}</td></tr>\" else: html += \"<tr><td colspan='2'>\u0414\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442</td></tr>\" html += \"\"\" </table> </body> </html> \"\"\" return html def handle_request(client_socket): request = client_socket.recv(1024).decode() headers = request.split(\"\\r\\n\") method = headers[0].split()[0] if method == \"GET\": response = generate_html() client_socket.send(\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n\".encode()) client_socket.send(response.encode()) elif method == \"POST\": body = request.split(\"\\r\\n\\r\\n\")[1] post_data = body.split(\"&\") discipline = post_data[0].split(\"=\")[1] grade = post_data[1].split(\"=\")[1] if discipline in disciplines_data: disciplines_data[discipline].append(grade) else: disciplines_data[discipline] = [grade] response = \"HTTP/1.1 303 See Other\\r\\nLocation: /\\r\\n\\r\\n\" client_socket.send(response.encode()) client_socket.close() def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 8080)) server_socket.listen(5) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://localhost:8080/\") while True: client_socket, _ = server_socket.accept() handle_request(client_socket) if __name__ == \"__main__\": start_server()","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:"}]}